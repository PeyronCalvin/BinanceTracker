@page "/"

<PageTitle>Home</PageTitle>

<h1>Binance Dashboard</h1>

<p>@value</p>

@using Binance.Spot;
@using System.Security.Cryptography;
@using System.Text;
@code {
    string value = "Value not found";
    string serverTime ="";
    string recvWindow = "60000"; 
    RSA rsaPrivateKey = CreateRsaKey(@"Keys/privateKey.pem");
    RSA rsaPublicKey = CreateRsaKey(@"Keys/publicKey.pem");
    string apiKey = File.ReadAllText(@"Keys/apiKey");
    string requestUrl ="";
    long timestamp;

    protected override async Task OnInitializedAsync()
    {
        Market market = new Market();
        serverTime = await market.CheckServerTime();
        await GetSimpleEarnFlexibleAccountInfo();
    }

    public static string Sign(RSA rsaPrivateKey, string payload)
    {
        byte[] requestBytes = Encoding.ASCII.GetBytes(payload);
        string signature = System.Convert.ToBase64String(rsaPrivateKey.SignData(requestBytes, HashAlgorithmName.SHA256, RSASignaturePadding.Pkcs1));
        string urlSafeSignature = signature
            .Replace("+", "%2B")
            .Replace("/", "%2F")
            .Replace("=", "%3D");
        return urlSafeSignature;

    }


    public static bool VerifySignature(RSA rsaPublicKey, string payload, string base64Signature)
    {
        base64Signature = base64Signature
                .Replace("%2B", "+")
                .Replace("%2F", "/")
                .Replace("%3D", "=");
        byte[] signature = System.Convert.FromBase64String(base64Signature);
        byte[] payloadBytes = Encoding.ASCII.GetBytes(payload);
        return rsaPublicKey.VerifyData(payloadBytes, signature, HashAlgorithmName.SHA256, RSASignaturePadding.Pkcs1);
    }


    private static string ReformKey(string key)
    {
        var reformed = key.Replace("-----BEGIN PRIVATE KEY-----", "")
                          .Replace("-----END PRIVATE KEY-----", "")
                          .Replace("-----BEGIN PUBLIC KEY-----", "")
                          .Replace("-----END PUBLIC KEY-----", "")
                          .Replace("\n", "")
                          .Replace("\r", "")
                          .Trim();
        return reformed;
    }

    public static RSA CreateRsaKey(string file)
    {
        try
        {
            string keyString = File.ReadAllText(file);
            string modifiedKey = ReformKey(keyString);
            byte[] keyBytes = System.Convert.FromBase64String(modifiedKey);
            RSA rsa = RSA.Create();

            if (keyString.Contains("PRIVATE KEY"))
            {
                rsa.ImportPkcs8PrivateKey(keyBytes, out _);
            }
            else if (keyString.Contains("PUBLIC KEY"))
            {
                rsa.ImportSubjectPublicKeyInfo(keyBytes, out _);
            }
            else
            {
                throw new InvalidOperationException("Invalid key format.");
            }

            return rsa;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating RSA key: {ex.Message}");
            throw;
        }
    }

    private string generateUrl(string baseUrl, Dictionary<string, string> parameters)
    {
        var queryString = string.Join("&", parameters.Select(kvp => $"{kvp.Key}={kvp.Value}"));
        baseUrl = "https://api.binance.com/sapi/v1/simple-earn/flexible/position?" + queryString;
        string signature = Sign(rsaPrivateKey, queryString);
        string finalUrl = baseUrl + "&signature=" + signature;
        return finalUrl;
    }

    public async Task sendHttpRequest(HttpClient httpClient)
    {
        try
        {
            using (var requestMessage = new HttpRequestMessage(HttpMethod.Get, requestUrl))
            {
                httpClient.DefaultRequestHeaders.Add("X-MBX-APIKEY", apiKey);
                var response = await httpClient.SendAsync(requestMessage);
                if (response.IsSuccessStatusCode)
                {
                    value = await response.Content.ReadAsStringAsync();
                }
                else
                {
                    value = $"Error: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}" + " | " + requestUrl;
                }
            }
        }
        catch (Exception ex)
        {
            value = "Error fetching: " + ex.Message;
        }
    }


    public async Task GetSimpleEarnFlexibleAccountInfo()
    {
        HttpClient httpClient = new HttpClient();
        timestamp = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();
        Dictionary<string, string> parameters = new Dictionary<string, string>
        {
            { "type", "SPOT" },
            { "timestamp", timestamp.ToString() },
            { "recvWindow", recvWindow},
        };

        requestUrl = generateUrl("https://api.binance.com/sapi/v1/simple-earn/flexible/position?", parameters);

        await sendHttpRequest(httpClient);
    }
}