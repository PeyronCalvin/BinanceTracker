@page "/"
@rendermode InteractiveServer

<div class="container" style="max-width: 100vw; overflow: hidden;">
    <PageTitle>BINANCE PORTFOLIO TRACKER</PageTitle>

    <h1>Binance Dashboard</h1>

    <table>
        <tr>
            <td><button id="btnSpot" @onclick="GetHistoricalSpotOrders">Spot</button></td>
            <td><button id="btnWallet" @onclick="showWalletGraph">wallet</button></td>
            <td><button id="btnTrades" @onclick="GetTrades">Trades</button></td>
            <td><button id="btnDepositHistory" @onclick="GetDepositHistory">Deposit History</button></td>
        </tr>
    </table>

    @if (earnOpened)
    {
        
    <table>
        <tr>
                <td>
                    <button id="startTime" @onclick="() => ToggleDatePicker(true)">Start Time</button>
                    @startTime.ToString("dd/MM/yyyy HH:mm")
                </td>
                <td>
                    <button id="endTime" @onclick="() => ToggleDatePicker(false)">End Time</button>
                    @endTime.ToString("dd/MM/yyyy HH:mm")
                </td>
                <td>
                    <button @onclick="ToggleIntervalPicker">Interval</button>
                    @Global.interval
                </td>
                <td>
                    <button id="btnEarn" @onclick="getEarnGraphAggregated">Search</button>
                </td>
        </tr>
        <tr>
            @if (showStartTimeDatePicker)
            {
                    <InputDate @bind-Value="startTime" class="form-control" min="@Global.dateMinOr200DaysBeforeEnd" max="@endTime.ToString("yyyy-MM-dd")" />
            }
            @if (showEndTimeDatePicker)
            {
                    <InputDate @bind-Value="endTime" class="form-control" min="@startTime.ToString("yyyy-MM-dd")" max="@Global.dateMaxOr200DaysAfterStart" />
            }
            @if (showIntervalPicker)
            {
                <select multiple class="form-control" id="search-multiple" name="search-multiple" value="">
                        @foreach (var interval in Global.intervals)
                    {
                        <option @onclick="()=>selectInterval(interval)">@interval</option>
                    }
                </select>
            }
        </tr>
    </table>
    }

    @if (Global.value != "")
    {
        <p>@Global.value</p>
    }

    @if (Global.base64Image != "")
    {
        <img src="data:image/png;base64,@Global.base64Image" />
    }

</div>

@using Binance.Spot;
@using System.Security.Cryptography;
@using System.Text;
@using System
@using ScottPlot;
@using BinanceApp.Models;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using System.Text.RegularExpressions;
@using System.Globalization;

@code {
    bool earnOpened = false;
    bool showIntervalPicker = false;
    bool showStartTimeDatePicker = false;
    bool showEndTimeDatePicker = false;
    DateTime startTime = DateTime.Now.AddDays(-1);
    DateTime endTime = DateTime.Now;

    public void ClearAll()
    {
        Global.value = "";
        Global.base64Image = "";
    }

    public async Task GetHistoricalSpotOrders()
    {
        ClearAll();
        if (earnOpened) { showWalletGraph(); }
        await Spot.GetHistoricalSpotOrders();

    }

    public async Task GetTrades()
    {
        ClearAll();
        if (earnOpened) { showWalletGraph(); }
        Global.value = await Trades.GetTrades(Global.symbol);
        StateHasChanged();
    }


    public async Task GetDepositHistory()
    {
        ClearAll();
        if (earnOpened) { showWalletGraph(); }
        Global.value = await Account.GetDepositHistory();
    }

    private void ToggleDatePicker(bool isStart)
    {
        Global.dateMinOr200DaysBeforeEnd = (DateTime.Parse(Global.dateMin) > endTime.AddDays(-200)) ? Global.dateMin : endTime.AddDays(-200).ToString("yyyy-MM-dd");
        Global.dateMaxOr200DaysAfterStart = (DateTime.Parse(Global.dateMax) < startTime.AddDays(200)) ? Global.dateMax : startTime.AddDays(200).ToString("yyyy-MM-dd");
        showIntervalPicker = false;
        if(isStart) {showStartTimeDatePicker = !showStartTimeDatePicker; showEndTimeDatePicker = false; }
        else { showEndTimeDatePicker = !showEndTimeDatePicker; showStartTimeDatePicker = false; }
        StateHasChanged();
    }

    private void ToggleIntervalPicker()
    {
        showStartTimeDatePicker = false;
        showEndTimeDatePicker = false;
        showIntervalPicker = !showIntervalPicker;
    }

    private void selectInterval(string selectedInterval)
    {
        Global.interval = selectedInterval;
    }

    private void showWalletGraph()
    {
        ClearAll();
        earnOpened = !earnOpened;
    }

    private async void getEarnGraphAggregated()
    {
        ClearAll();
        StateHasChanged();
        Global.base64Image = await Account.ProduceGraphAccountInfo(startTime, endTime, Global.interval);
        StateHasChanged();
    }

    private async Task Test()
    {
        ClearAll();
        StateHasChanged();
        Global.base64Image = await BinanceEarn.ProduceGraphEarnAsset("BTC", startTime, endTime, Global.interval);
        StateHasChanged();
        
    }
}